const terminalOutput = document.getElementById('output');
const inputField = document.getElementById('input');
const commands = ['about', 'contact', 'help', 'clear', 'whoami', 'gui', 'themes', 'time', 'github-repo'];
let commandHistory = [];
let historyIndex = -1;

function handleInput(event) {
    if (event.key === 'Enter') {
        const userInput = inputField.value.trim().toLowerCase();
        inputField.value = '';

        if (userInput) {
            commandHistory.unshift(userInput);
            historyIndex = -1;

            switch (userInput) {
                case 'about':
                    showOutput('<div class="about">–ü—Ä–∏–≤–µ—Ç, —è<b> zettiks</b>, –Ω–µ–¥–æ–∫–æ–¥–µ—Ä –∏ –¥–∏–∑–∞–π–Ω–µ—Ä . –û–±–æ–∂–∞—é —Ç–µ–ª–µ–≥—É. –ü–∏—à—É –±–æ—Ç–æ–≤, –¥–µ–ª–∞—é —Ä–∞–∑–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã.</div>');
                    break;
                case 'contact':
                    showOutput('–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≤: <hr><br> Telegram: <a href="https://t.me/zettiks">[click]</a> <br> GitHub: <a href="https://github.com/zettiks">[click]</a>');
                    break;
                case 'help':
                    showOutput('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: <br> <div class="command">- about [—É–∑–Ω–∞—Ç—å –∫—Ç–æ —ç—Ç–æ—Ç –∑–µ—Ç—Ç–∏–∫—Å] <br> - contact [–∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∑–µ—Ç—Ç–∏–∫—Å–æ–º] <br> - help <br> - clear <br> - whoami [–ö—Ç–æ —Ç—ã —Ç–∞–∫–æ–π?] <br> - themes [–°–ø–∏—Å–æ–∫ —Ç–µ–º] <br></div><br> –ò—Å–ø–æ–ª—å–∑—É–π <span class="command2">–≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–µ–ª–æ—á–∫—É</span> —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥–µ, –ò—Å–ø–æ–ª—å–∑—É–π <span class="command2"><b>Tab</b></span> —á—Ç–æ –±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.');
                    break;
                case 'clear':
                    clearOutput();
                    break;
                case 'whoami':
                    getIPAddress();
                    break;
                case 'themes':
                    showThemes();
                    break;
                case 'time':
                    showOutput('—É–ª–µ—á–∫–∞ –¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–∞—Ç—Å—è?')
                    break;
                case '1488':
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† showOutput('—É–ª—å–∫–∞^^ü§ç')
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† break;
                default:
                    if (userInput.startsWith('theme set')) {
                        setTheme(userInput.substring('theme set'.length).trim());
                    } else {
                        showOutput(`–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: ${userInput}`);
                    }
            }
        }
    } else if (event.key === 'Tab') {
        autocompleteCommand();
        event.preventDefault();
    } else if (event.key === 'ArrowUp') {
        navigateCommandHistory(1);
    } else if (event.key === 'ArrowDown') {
        navigateCommandHistory(-1);
    }
}

function showOutput(message) {
    terminalOutput.innerHTML += `<br><div>${message}</div>`;
    terminalOutput.scrollTop = terminalOutput.scrollHeight;
}

function clearOutput() {
    terminalOutput.innerHTML = '';
}

function autocompleteCommand() {
    const userInput = inputField.value.trim().toLowerCase();
    const partialCommand = userInput.split(' ')[0];

    if (partialCommand.length > 0) {
        const matchingCommands = commands.filter(command => command.startsWith(partialCommand));

        if (matchingCommands.length === 1) {
            inputField.value = matchingCommands[0];
        } else if (matchingCommands.length > 1) {
            showOutput('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ' + matchingCommands.join(', '));
        }
    }
}

async function getIPAddress() {
    try {
        const response = await fetch('https://api.sypexgeo.net/');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        const country = data.country.name_ru || '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
        const city = data.city.name_ru || '–ì–æ—Ä–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        const ip = data.ip || 'IP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        showOutput(`–¢—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç–≤–æ–π IP-–∞–¥—Ä–µ—Å: —Å–∫—Ä—ã—Ç, ${country}, ${city}`);
    } catch (error) {
        showOutput('–¢–≤–æ–π –∞–π–ø–∏ —Å–∫—Ä—ã—Ç. –¢—ã –∞–Ω–æ–Ω–∏–º–µ–Ω');
        console.error('Error fetching IP address:', error);
    }
}


function navigateToPage(page) {
    window.location.href = page;
}

function navigateCommandHistory(direction) {
    if (commandHistory.length === 0) {
        return;
    }

    historyIndex += direction;

    if (historyIndex < -1) {
        historyIndex = -1;
    } else if (historyIndex >= commandHistory.length) {
        historyIndex = commandHistory.length - 1;
    }

    inputField.value = historyIndex === -1 ? '' : commandHistory[historyIndex];
}

function showThemes() {
    showOutput('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: <br> - light <br> - dark <br> - ubuntu <br> - powershell <br> <p>–ò—Å–ø–æ–ª—å–∑—É–π: theme set [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã] —á—Ç–æ-–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É<br> –ü—Ä–∏–º–µ—Ä: theme set ubuntu</p>');
}

function setTheme(themeName) {
    const body = document.body;

    // Remove previous themes
    body.classList.remove('theme-light', 'theme-dark', 'theme-ubuntu', 'theme-powershell');

    switch (themeName) {
        case 'light':
            body.classList.add('theme-light');
            break;
        case 'dark':
            body.classList.add('theme-dark');
            break;
        case 'ubuntu':
            body.classList.add('theme-ubuntu');
            break;
        case 'powershell':
            body.classList.add('theme-powershell');
            break;
        default:
            showOutput(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞.: ${themeName}`);
    }
}

setInterval(function(){ window.scrollBy(0,1000); }, 1000)
